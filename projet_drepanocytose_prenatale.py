import streamlit as st
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import pandas as pd
import os
import uuid
from datetime import datetime
import time

# Configuration de la page
st.set_page_config(page_title="Suivi Dr√©panocytose", layout="wide")

# Initialisation des donn√©es de session
if 'families' not in st.session_state:
    st.session_state.families = {}

if 'current_family_id' not in st.session_state:
    st.session_state.current_family_id = None

# Fonction pour g√©n√©rer un identifiant unique pour la famille
def generate_family_id():
    return str(uuid.uuid4())[:8].upper()

# Cr√©ation et entra√Ænement du mod√®le
def train_model():
    # Cr√©er des donn√©es d'entra√Ænement simul√©es
    X_train = []
    y_train = []
    
    # G√©n√©rer des exemples pour chaque combinaison possible
    for mere in range(4):  # HbAA, HbAS, HbSC, HbSS
        for pere in range(4):  # HbAA, HbAS, HbSC, HbSS
            for antecedent in range(2):  # Oui, Non
                
                # Logique simplifi√©e pour la pr√©diction
                if mere == 0 and pere == 0:  # Deux parents HbAA
                    enfant = 0  # HbAA
                elif (mere == 0 and pere == 3) or (mere == 3 and pere == 0):  # HbAA + HbSS
                    enfant = 1  # HbAS
                elif (mere == 1 and pere == 1):  # Deux parents HbAS
                    # 25% HbAA, 50% HbAS, 25% HbSS
                    for _ in range(4):
                        if _ == 0:
                            X_train.append([mere, pere, antecedent])
                            y_train.append(0)  # HbAA
                        elif _ == 3:
                            X_train.append([mere, pere, antecedent])
                            y_train.append(3)  # HbSS
                        else:
                            X_train.append([mere, pere, antecedent])
                            y_train.append(1)  # HbAS
                    continue
                elif (mere == 1 and pere == 3) or (mere == 3 and pere == 1):  # HbAS + HbSS
                    # 50% HbAS, 50% HbSS
                    X_train.append([mere, pere, antecedent])
                    y_train.append(1)  # HbAS
                    X_train.append([mere, pere, antecedent])
                    y_train.append(3)  # HbSS
                    continue
                elif (mere == 2 or pere == 2):  # Si l'un des parents est HbSC
                    if mere == 0 or pere == 0:  # HbSC + HbAA
                        enfant = 1  # HbAS (simplifi√©)
                    elif mere == 1 or pere == 1:  # HbSC + HbAS
                        enfant = 2  # HbSC (simplifi√©)
                    else:  # HbSC + HbSS ou HbSC + HbSC
                        enfant = 2  # HbSC (simplifi√©)
                else:
                    enfant = 1  # HbAS par d√©faut pour les autres cas
                
                X_train.append([mere, pere, antecedent])
                y_train.append(enfant)
    
    # Convertir en arrays numpy
    X_train = np.array(X_train)
    y_train = np.array(y_train)
    
    # Entra√Æner le mod√®le
    model = RandomForestClassifier(n_estimators=600, min_samples_split=2, min_samples_leaf=1, max_depth=10, random_state=42)
    model.fit(X_train, y_train)
    
    return model

# Dictionnaires de mapping
statut_mere_mapping = {'HbAA': 0, 'HbAS': 1, 'HbSC': 2, 'HbSS': 3}
statut_pere_mapping = {'HbAA': 0, 'HbAS': 1, 'HbSC': 2, 'HbSS': 3}
AC_mapping = {'Oui': 0, 'Non': 1}
Statut_Enfant_mapping = {0: 'HbAA', 1: 'HbAS', 2: 'HbSC', 3: 'HbSS'}

# Entra√Ænement du mod√®le
model = train_model()

# Fonction pour cr√©er un bouton stylis√©
def styled_button(label, key=None, type="primary"):
    button_styles = {
        "primary": "background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; margin: 5px 0;",
        "secondary": "background-color: #2196F3; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; margin: 5px 0;",
        "warning": "background-color: #ff9800; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; margin: 5px 0;",
        "danger": "background-color: #f44336; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; width: 100%; margin: 5px 0;"
    }
    
    button_html = f"""
    <button style="{button_styles[type]}" id="{key}">{label}</button>
    """
    return st.markdown(button_html, unsafe_allow_html=True)

# Interface principale avec menu lat√©ral
# ------ SIDEBAR ------
with st.sidebar:
    # Toujours afficher l'image en haut du sidebar
    if os.path.exists("FEMME.png"):
        st.image("FEMME.png", width=200)
    else:
        st.warning("Image 'FEMME.png' non trouv√©e.")

    st.title("Menu Principal")

    # Container pour les boutons de menu
    menu_container = st.container()
    
    with menu_container:
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìã Accueil", use_container_width=True):
                st.session_state.page = "Accueil"
                st.rerun()
                
            if st.button("üîÆ Pr√©diction", use_container_width=True):
                st.session_state.page = "Nouvelle Pr√©diction"
                st.rerun()
                
            if st.button("üè• Suivi", use_container_width=True):
                st.session_state.page = "Suivi M√©dical" 
                st.rerun()
                
        with col2:
            if st.button("üîç Recherche", use_container_width=True):
                st.session_state.page = "Recherche Famille"
                st.rerun()
                
            if st.button("‚ÑπÔ∏è Informations", use_container_width=True):
                st.session_state.page = "Informations"
                st.rerun()
                
            if st.button("üìä Statistiques", use_container_width=True):
                st.session_state.page = "Statistiques"
                st.rerun()

    # Afficher l'ID de la famille courante si elle existe
    if st.session_state.current_family_id:
        st.info(f"**Famille en cours**: {st.session_state.current_family_id}")
        if st.button("Effacer s√©lection", key="clear_family"):
            st.session_state.current_family_id = None
            st.rerun()

# Initialiser la page si elle n'est pas d√©finie
if 'page' not in st.session_state:
    st.session_state.page = "Accueil"

# ------ PAGE D'ACCUEIL ------
if st.session_state.page == "Accueil":
    st.title("Syst√®me de Pr√©diction et Suivi de la Dr√©panocytose")
    
    col1, col2 = st.columns([1, 3])
    
    with col1:
        if os.path.exists("FEMME.png"):
            st.image("FEMME.png", width=300)
    
    with col2:
        st.header("Bienvenue dans l'application de suivi de dr√©panocytose")
        st.markdown("""
        Cette application permet aux professionnels de sant√© de:
        * **Pr√©dire** le statut g√©n√©tique des enfants √† na√Ætre
        * **Suivre** l'√©tat de sant√© des patients atteints de dr√©panocytose
        * **G√©n√©rer** des recommandations personnalis√©es
        * **Maintenir** un dossier m√©dical complet
        """)
        
        # Boutons d'action rapide
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÆ Nouvelle Pr√©diction", use_container_width=True):
                st.session_state.page = "Nouvelle Pr√©diction"
                st.rerun()
        with col2:
            if st.button("üîç Rechercher un Dossier", use_container_width=True):
                st.session_state.page = "Recherche Famille"
                st.rerun()
    
    st.subheader("Qu'est-ce que la Dr√©panocytose ?")
    st.write("""
        La dr√©panocytose est une maladie g√©n√©tique qui affecte les globules rouges du sang, leur donnant une forme de faucille. 
        Cela peut provoquer des douleurs, des infections fr√©quentes, et d'autres complications. 
        Elle est surtout pr√©sente chez les personnes d'origine africaine, m√©diterran√©enne et du Moyen-Orient. 
        Un suivi m√©dical est essentiel pour g√©rer cette maladie et am√©liorer la qualit√© de vie des personnes atteintes.
    """)
    
    # Afficher les statistiques des familles
    st.subheader("Statistiques des familles suivies")
    stats_container = st.container()
    
    with stats_container:
        if len(st.session_state.families) > 0:
            st.success(f"Nombre total de familles suivies: {len(st.session_state.families)}")
            
            # Calculer des statistiques sur les statuts pr√©dits
            statuts_predits = []
            statuts_confirmes = []
            for family_id, family_data in st.session_state.families.items():
                if 'predicted_status' in family_data:
                    statuts_predits.append(family_data['predicted_status'])
                if 'confirmed_status' in family_data and family_data['confirmed_status']:
                    statuts_confirmes.append(family_data['confirmed_status'])
            
            col1, col2 = st.columns(2)
            
            with col1:
                if statuts_predits:
                    st.write("### Statuts pr√©dits")
                    statut_counts = pd.Series(statuts_predits).value_counts()
                    st.bar_chart(statut_counts)
            
            with col2:
                if statuts_confirmes:
                    st.write("### Statuts confirm√©s")
                    statut_confirmed_counts = pd.Series(statuts_confirmes).value_counts()
                    st.bar_chart(statut_confirmed_counts)
        else:
            st.info("Aucune famille n'est encore enregistr√©e dans le syst√®me.")
            
        # Bouton pour aller aux statistiques d√©taill√©es
        if st.button("Voir statistiques d√©taill√©es", use_container_width=True):
            st.session_state.page = "Statistiques"
            st.rerun()

# ------ PAGE DE NOUVELLE PR√âDICTION ------
elif st.session_state.page == "Nouvelle Pr√©diction":
    st.title("Nouvelle Pr√©diction")
    
    # Onglets pour diff√©rentes m√©thodes de cr√©ation
    tabs = st.tabs(["Nouvelle Famille", "Famille Existante"])
    
    with tabs[0]:
        # Formulaire de pr√©diction pour nouvelle famille
        with st.form("prediction_form"):
            st.subheader("Informations du couple")
            
            col1, col2 = st.columns(2)
            
            with col1:
                nom_famille = st.text_input("Nom de Famille")
                statut_mere = st.selectbox("Statut G√©n√©tique de la M√®re", options=['HbAA', 'HbAS', 'HbSC', 'HbSS'])
                antecedents = st.selectbox("Ant√©c√©dents Familiaux de Dr√©panocytose", options=['Oui', 'Non'])
            
            with col2:
                prenoms_parents = st.text_input("Pr√©noms des Parents")
                statut_pere = st.selectbox("Statut G√©n√©tique du P√®re", options=['HbAA', 'HbAS', 'HbSC', 'HbSS'])
                date_consultation = st.date_input("Date de la Consultation")
            
            notes = st.text_area("Notes Additionnelles", height=100)
            
            submitted = st.form_submit_button("Pr√©dire le Statut de l'Enfant")
        
        if submitted and nom_famille:
            with st.spinner("Analyse en cours..."):
                time.sleep(1)  # Simulation d'un traitement
                
                # Conversion des entr√©es en valeurs num√©riques
                nouvelle_donnee = [[statut_mere_mapping[statut_mere], statut_pere_mapping[statut_pere], AC_mapping[antecedents]]]
                
                # Pr√©diction
                prediction = model.predict(nouvelle_donnee)
                statut_enfant_pred = Statut_Enfant_mapping[prediction[0]]
                
                # G√©n√©ration d'un ID de famille unique
                family_id = generate_family_id()
                
                # Enregistrement de la famille
                st.session_state.families[family_id] = {
                    'name': nom_famille,
                    'prenoms': prenoms_parents,
                    'predicted_status': statut_enfant_pred,
                    'statut_mere': statut_mere,
                    'statut_pere': statut_pere,
                    'antecedents': antecedents,
                    'creation_date': date_consultation.strftime('%Y-%m-%d'),
                    'consultations': [],
                    'baby_born': False,
                    'confirmed_status': None
                }
                
                # Ajouter cette consultation
                st.session_state.families[family_id]['consultations'].append({
                    'date': date_consultation.strftime('%Y-%m-%d'),
                    'type': 'Pr√©diction',
                    'notes': notes,
                    'recommendations': []
                })
                
                # D√©finir cette famille comme la famille courante
                st.session_state.current_family_id = family_id
            
            # Affichage des r√©sultats dans une carte stylis√©e
            st.success("Pr√©diction r√©alis√©e avec succ√®s!")
            
            result_container = st.container()
            with result_container:
                st.markdown(f"""
                <div style="padding: 20px; border-radius: 10px; border: 1px solid #e0e0e0; background-color: #f9f9f9; margin-bottom: 20px;">
                    <h3 style="color: #2c3e50;">R√©sultats de la Pr√©diction</h3>
                    <p><strong>Famille:</strong> {nom_famille} - {prenoms_parents}</p>
                    <p><strong>ID Famille:</strong> {family_id}</p>
                    <p><strong>Statut pr√©dit:</strong> <span style="font-size: 18px; font-weight: bold; color: {'red' if statut_enfant_pred in ['HbSS', 'HbSC'] else 'green'};">{statut_enfant_pred}</span></p>
                    <p><small>Conservez cet identifiant pour les consultations futures.</small></p>
                </div>
                """, unsafe_allow_html=True)
                
                result_col1, result_col2 = st.columns(2)
                
                with result_col1:
                    st.subheader("Risques associ√©s")
                    if statut_enfant_pred in ['HbSS', 'HbSC']:
                        st.warning("‚ö†Ô∏è Risque √©lev√© de complications li√©es √† la dr√©panocytose")
                    elif statut_enfant_pred == 'HbAS':
                        st.info("‚ÑπÔ∏è Porteur du trait dr√©panocytaire, mais risque de complications r√©duit")
                    else:
                        st.success("‚úÖ Aucun risque de dr√©panocytose d√©tect√©")
                
                with result_col2:
                    # Recommandations en fonction du statut pr√©dit
                    st.subheader("Recommandations m√©dicales")
                    
                    if statut_enfant_pred in ['HbSS', 'HbSC']:
                        recommendations = [
                            "Suivi m√©dical rapproch√© avec un h√©matologue sp√©cialiste",
                            "Suppl√©mentation en acide folique et en fer",
                            "Alimentation riche en fer et en vitamines",
                            "Examens sanguins r√©guliers",
                            "Vaccination compl√®te incluant le pneumocoque",
                            "√âviter les situations √† risque d'infection"
                        ]
                    else:
                        recommendations = [
                            "Suivi pr√©natal standard",
                            "Alimentation √©quilibr√©e",
                            "Hydratation ad√©quate",
                            "Repos suffisant",
                            "√âviter le stress"
                        ]
                    
                    for i, rec in enumerate(recommendations):
                        st.markdown(f"<p style='margin:5px;'>üî∏ {rec}</p>", unsafe_allow_html=True)
                        
                    # Enregistrer ces recommandations
                    st.session_state.families[family_id]['consultations'][-1]['recommendations'] = recommendations
            
            # Boutons d'action rapide
            action_col1, action_col2, action_col3 = st.columns(3)
            
            with action_col1:
                if st.button("üìã Imprimer le rapport", use_container_width=True):
                    st.balloons()
                    st.success("Impression du rapport en cours...")
            
            with action_col2:
                if st.button("üè• Aller au suivi m√©dical", use_container_width=True):
                    st.session_state.page = "Suivi M√©dical"
                    st.rerun()
            
            with action_col3:
                if st.button("üîÆ Nouvelle pr√©diction", use_container_width=True):
                    st.session_state.current_family_id = None
                    st.experimental_rerun()
    
    with tabs[1]:
        # Recherche de famille existante pour pr√©diction
        st.subheader("Rechercher une famille existante")
        
        search_method = st.radio("M√©thode de recherche", ["Par ID", "Par Nom"])
        
        if search_method == "Par ID":
            family_id = st.text_input("Identifiant de la famille")
            search = st.button("Rechercher")
            
            if search and family_id:
                if family_id in st.session_state.families:
                    family = st.session_state.families[family_id]
                    st.success(f"Famille trouv√©e: {family['name']} - {family['prenoms']}")
                    
                    # Afficher informations et permettre nouvelle consultation
                    st.subheader("Informations actuelles")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**Statut m√®re**: {family['statut_mere']}")
                        st.write(f"**Statut p√®re**: {family['statut_pere']}")
                    
                    with col2:
                        st.write(f"**Statut pr√©dit pr√©c√©dent**: {family['predicted_status']}")
                        st.write(f"**Ant√©c√©dents**: {family['antecedents']}")
                    
                    if st.button("Acc√©der au dossier de suivi", use_container_width=True):
                        st.session_state.current_family_id = family_id
                        st.session_state.page = "Suivi M√©dical"
                        st.rerun()
                else:
                    st.error("Identifiant non trouv√©.")
        else:
            name = st.text_input("Nom de famille")
            search = st.button("Rechercher")
            
            if search and name:
                found_families = []
                for fid, fdata in st.session_state.families.items():
                    if name.lower() in fdata['name'].lower():
                        found_families.append((fid, fdata))
                
                if found_families:
                    st.success(f"{len(found_families)} famille(s) trouv√©e(s)")
                    for fid, fdata in found_families:
                        with st.expander(f"{fdata['name']} - {fdata['prenoms']}"):
                            st.write(f"**ID**: {fid}")
                            st.write(f"**Statut pr√©dit**: {fdata['predicted_status']}")
                            st.write(f"**Date de cr√©ation**: {fdata['creation_date']}")
                            
                            if st.button(f"S√©lectionner cette famille", key=f"select_{fid}"):
                                st.session_state.current_family_id = fid
                                st.session_state.page = "Suivi M√©dical"
                                st.rerun()
                else:
                    st.error("Aucune famille trouv√©e avec ce nom.")

# ------ PAGE DE SUIVI M√âDICAL ------
elif st.session_state.page == "Suivi M√©dical":
    st.title("Suivi M√©dical")
    
    # Si une famille est d√©j√† s√©lectionn√©e
    if st.session_state.current_family_id and st.session_state.current_family_id in st.session_state.families:
        family_id = st.session_state.current_family_id
        family = st.session_state.families[family_id]
        
        # Affichage des informations de la famille dans une carte stylis√©e
        st.markdown(f"""
        <div style="padding: 15px; border-radius: 10px; border: 1px solid #e0e0e0; background-color: #f9f9f9; margin-bottom: 20px;">
            <h3 style="color: #2c3e50;">{family['name']} - {family['prenoms']}</h3>
            <p><strong>ID Famille:</strong> {family_id}</p>
            <p><strong>Statut pr√©dit:</strong> <span style="font-weight: bold; color: {'red' if family['predicted_status'] in ['HbSS', 'HbSC'] else 'green'};">{family['predicted_status']}</span></p>
            <p><strong>Date de cr√©ation:</strong> {family['creation_date']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Onglets pour diff√©rentes sections du suivi
        tabs = st.tabs(["√âtat de Sant√©", "Historique", "Plan de Traitement", "Documents"])
        
        with tabs[0]:
            st.subheader("√âtat de Sant√© Actuel")
            
            # V√©rifier si l'enfant est n√©
            baby_born = st.checkbox("L'enfant est n√©", value=family['baby_born'])
            
            if baby_born:
                if not family['baby_born']:
                    st.session_state.families[family_id]['baby_born'] = True
                
                # Formulaire pour le suivi post-naissance
                with st.form("health_monitoring_form"):
                    st.write("### Suivi post-naissance")
                    
                    # Statut confirm√© apr√®s naissance
                    confirmed_status = st.selectbox(
                        "Statut confirm√© apr√®s naissance", 
                        options=['HbAA', 'HbAS', 'HbSC', 'HbSS'],
                        index=['HbAA', 'HbAS', 'HbSC', 'HbSS'].index(family['confirmed_status']) if family['confirmed_status'] else 0
                    )
                    
                    # Si le statut est diff√©rent de celui pr√©dit, afficher une alerte
                    if family['confirmed_status'] and confirmed_status != family['confirmed_status']:
                        st.warning(f"Attention: Vous √™tes en train de modifier le statut confirm√© de l'enfant de {family['confirmed_status']} √† {confirmed_status}.")
                    
                    # Param√®tres de sant√© avec explications
                    st.write("### Param√®tres de sant√©")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        poids = st.number_input("Poids (kg)", min_value=0.0, max_value=20.0, step=0.1)
                        taille = st.number_input("Taille (cm)", min_value=0.0, max_value=150.0, step=0.5)
                        temperature = st.number_input("Temp√©rature (¬∞C)", min_value=35.0, max_value=42.0, step=0.1, value=37.0)
                    
                    with col2:
                        taux_hb = st.number_input("Taux d'h√©moglobine (g/dL)", min_value=0.0, max_value=20.0, step=0.1)
                        st.info("Normal: 11-13 g/dL")
                        
                        globules_blancs = st.number_input("Globules blancs (G/L)", min_value=0.0, max_value=50.0, step=0.1)
                        st.info("Normal: 5-20 G/L")
                    
                    with col3:
                        plaquettes = st.number_input("Plaquettes (G/L)", min_value=0.0, max_value=1000.0, step=1.0)
                        st.info("Normal: 150-400 G/L")
                        
                        saturation = st.number_input("Saturation en oxyg√®ne (%)", min_value=80.0, max_value=100.0, step=0.5, value=97.0)
                        st.info("Normal: >95%")
                    
                    # Sympt√¥mes
                    st.write("### Sympt√¥mes observ√©s")
                    
                    symptomes_options = [
                        "Douleurs", "Fi√®vre", "Fatigue", "P√¢leur", "Ict√®re", 
                        "Infections", "Crises vaso-occlusives", "Douleurs abdominales",
                        "Douleurs thoraciques", "Difficult√©s respiratoires", "Aucun"
                    ]
                    
                    symptomes = st.multiselect(
                        "S√©lectionnez tous les sympt√¥mes observ√©s",
                        options=symptomes_options
                    )
                    
                    # Niveau de douleur si "Douleurs" est s√©lectionn√©
                    if "Douleurs" in symptomes or "Crises vaso-occlusives" in symptomes:
                        douleur_niveau = st.slider(
                            "Niveau de douleur (0-10)", 
                            min_value=0, 
                            max_value=10, 
                            value=5
                        )
                        
                        localisation_douleur = st.multiselect(
                            "Localisation de la douleur",
                            options=["Bras", "Jambes", "Dos", "Abdomen", "Thorax", "T√™te", "Articulations"]
                        )
                    else:
                        douleur_niveau = 0
                        localisation_douleur = []
                    
                    # Respect des recommandations
                    respect_recommandations = st.slider(
                        "Respect des recommandations m√©dicales", 
                        min_value=0, 
                        max_value=10, 
                        value=5,
                        help="0 = Non respect√©es, 10 = Parfaitement respect√©es"
                    )
                    
                    # Notes de consultation et date
                    date_consultation = st.date_input("Date de cette consultation", value=datetime.now())
                    notes_consultation = st.text_area("Notes de consultation", height=100)
                    
                    # Bouton de soumission
                    submitted = st.form_submit_button("Enregistrer la consultation", use_container_width=True)
                
                if submitted:
                    # Mise √† jour du statut confirm√©
                    st.session_state.families[family_id]['confirmed_status'] = confirmed_status
                    
                                        # Enregistrement de la consultation
                    nouvelle_consultation = {
                        'date': date_consultation.strftime('%Y-%m-%d'),
                        'type': 'Suivi post-naissance',
                        'poids': poids,
                        'taille': taille,
                        'temperature': temperature,
                        'taux_hb': taux_hb,
                        'globules_blancs': globules_blancs,
                        'plaquettes': plaquettes,
                        'saturation': saturation,
                        'symptomes': symptomes,
                        'douleur_niveau': douleur_niveau,
                        'localisation_douleur': localisation_douleur,
                        'respect_recommandations': respect_recommandations,
                        'notes': notes_consultation,
                        'recommendations': []
                    }

                    # Ajouter la consultation √† l'historique
                    st.session_state.families[family_id]['consultations'].append(nouvelle_consultation)

                    # Affichage d'un message de succ√®s
                    st.success("Consultation enregistr√©e avec succ√®s!")

            else:
                # Si l'enfant n'est pas encore n√©
                st.info("L'enfant n'est pas encore n√©. Veuillez revenir apr√®s la naissance pour enregistrer les informations de sant√©.")

        with tabs[1]:
            # Historique des consultations
            st.subheader("Historique des Consultations")

            if family['consultations']:
                for i, consultation in enumerate(family['consultations']):
                    with st.expander(f"Consultation du {consultation['date']} - {consultation['type']}"):
                        st.write(f"**Type:** {consultation['type']}")
                        st.write(f"**Notes:** {consultation['notes']}")
                        if 'poids' in consultation:
                            st.write(f"**Poids:** {consultation['poids']} kg")
                            st.write(f"**Taille:** {consultation['taille']} cm")
                            st.write(f"**Temp√©rature:** {consultation['temperature']} ¬∞C")
                            st.write(f"**Taux d'h√©moglobine:** {consultation['taux_hb']} g/dL")
                            st.write(f"**Globules blancs:** {consultation['globules_blancs']} G/L")
                            st.write(f"**Plaquettes:** {consultation['plaquettes']} G/L")
                            st.write(f"**Saturation en oxyg√®ne:** {consultation['saturation']} %")
                            st.write(f"**Sympt√¥mes:** {', '.join(consultation['symptomes']) if consultation['symptomes'] else 'Aucun'}")
                            if 'douleur_niveau' in consultation:
                                st.write(f"**Niveau de douleur:** {consultation['douleur_niveau']}/10")
                                st.write(f"**Localisation de la douleur:** {', '.join(consultation['localisation_douleur']) if consultation['localisation_douleur'] else 'Aucune'}")
                            st.write(f"**Respect des recommandations:** {consultation['respect_recommandations']}/10")
            else:
                st.info("Aucune consultation enregistr√©e pour cette famille.")

        with tabs[2]:
            # Plan de traitement
            st.subheader("Plan de Traitement")

            if family['confirmed_status']:
                st.write(f"Statut confirm√© de l'enfant: **{family['confirmed_status']}**")
                if family['confirmed_status'] in ['HbSS', 'HbSC']:
                    st.warning("‚ö†Ô∏è Plan de traitement intensif requis")
                    st.markdown("""
                    **Recommandations:**
                    - Suivi m√©dical r√©gulier avec un h√©matologue
                    - Suppl√©mentation en acide folique et en fer
                    - Vaccination compl√®te (pneumocoque, m√©ningocoque, etc.)
                    - √âviter les situations √† risque d'infection
                    - Gestion des crises vaso-occlusives avec des antalgiques
                    """)
                else:
                    st.success("‚úÖ Aucun plan de traitement sp√©cifique requis")
                    st.markdown("""
                    **Recommandations:**
                    - Suivi m√©dical standard
                    - Alimentation √©quilibr√©e
                    - Hydratation ad√©quate
                    - Repos suffisant
                    """)
            else:
                st.info("Veuillez confirmer le statut de l'enfant apr√®s la naissance pour g√©n√©rer un plan de traitement.")

        with tabs[3]:
            # Documents
            st.subheader("Documents")

            st.info("Cette section est en cours de d√©veloppement. Elle permettra de stocker et de visualiser les documents m√©dicaux li√©s √† la famille.")

    else:
        st.warning("Veuillez s√©lectionner une famille pour acc√©der au suivi m√©dical.")

# ------ PAGE DE RECHERCHE FAMILLE ------
elif st.session_state.page == "Recherche Famille":
    st.title("Recherche Famille")

    search_method = st.radio("M√©thode de recherche", ["Par ID", "Par Nom"])

    if search_method == "Par ID":
        family_id = st.text_input("Identifiant de la famille")
        search = st.button("Rechercher")

        if search and family_id:
            if family_id in st.session_state.families:
                family = st.session_state.families[family_id]
                st.success(f"Famille trouv√©e: {family['name']} - {family['prenoms']}")

                # Afficher informations et permettre nouvelle consultation
                st.subheader("Informations actuelles")

                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**Statut m√®re:** {family['statut_mere']}")
                    st.write(f"**Statut p√®re:** {family['statut_pere']}")

                with col2:
                    st.write(f"**Statut pr√©dit pr√©c√©dent:** {family['predicted_status']}")
                    st.write(f"**Ant√©c√©dents:** {family['antecedents']}")

                if st.button("Acc√©der au dossier de suivi", use_container_width=True):
                    st.session_state.current_family_id = family_id
                    st.session_state.page = "Suivi M√©dical"
                    st.rerun()
            else:
                st.error("Identifiant non trouv√©.")
    else:
        name = st.text_input("Nom de famille")
        search = st.button("Rechercher")

        if search and name:
            found_families = []
            for fid, fdata in st.session_state.families.items():
                if name.lower() in fdata['name'].lower():
                    found_families.append((fid, fdata))

            if found_families:
                st.success(f"{len(found_families)} famille(s) trouv√©e(s)")
                for fid, fdata in found_families:
                    with st.expander(f"{fdata['name']} - {fdata['prenoms']}"):
                        st.write(f"**ID:** {fid}")
                        st.write(f"**Statut pr√©dit:** {fdata['predicted_status']}")
                        st.write(f"**Date de cr√©ation:** {fdata['creation_date']}")

                        if st.button(f"S√©lectionner cette famille", key=f"select_{fid}"):
                            st.session_state.current_family_id = fid
                            st.session_state.page = "Suivi M√©dical"
                            st.rerun()
            else:
                st.error("Aucune famille trouv√©e avec ce nom.")

# ------ PAGE D'INFORMATIONS ------
elif st.session_state.page == "Informations":
    st.title("Informations sur la Dr√©panocytose")

    st.markdown("""
    ### Qu'est-ce que la dr√©panocytose ?
    La dr√©panocytose est une maladie g√©n√©tique qui affecte les globules rouges du sang, leur donnant une forme de faucille. 
    Cela peut provoquer des douleurs, des infections fr√©quentes, et d'autres complications. 
    Elle est surtout pr√©sente chez les personnes d'origine africaine, m√©diterran√©enne et du Moyen-Orient. 
    Un suivi m√©dical est essentiel pour g√©rer cette maladie et am√©liorer la qualit√© de vie des personnes atteintes.
    """)

    st.markdown("""
    ### Comment fonctionne cette application ?
    Cette application permet aux professionnels de sant√© de:
    - **Pr√©dire** le statut g√©n√©tique des enfants √† na√Ætre
    - **Suivre** l'√©tat de sant√© des patients atteints de dr√©panocytose
    - **G√©n√©rer** des recommandations personnalis√©es
    - **Maintenir** un dossier m√©dical complet
    """)

# ------ PAGE DE STATISTIQUES ------
elif st.session_state.page == "Statistiques":
    st.title("Statistiques")

    if len(st.session_state.families) > 0:
        st.success(f"Nombre total de familles suivies: {len(st.session_state.families)}")

        # Calculer des statistiques sur les statuts pr√©dits
        statuts_predits = []
        statuts_confirmes = []
        for family_id, family_data in st.session_state.families.items():
            if 'predicted_status' in family_data:
                statuts_predits.append(family_data['predicted_status'])
            if 'confirmed_status' in family_data and family_data['confirmed_status']:
                statuts_confirmes.append(family_data['confirmed_status'])

        col1, col2 = st.columns(2)

        with col1:
            if statuts_predits:
                st.write("### Statuts pr√©dits")
                statut_counts = pd.Series(statuts_predits).value_counts()
                st.bar_chart(statut_counts)

        with col2:
            if statuts_confirmes:
                st.write("### Statuts confirm√©s")
                statut_confirmed_counts = pd.Series(statuts_confirmes).value_counts()
                st.bar_chart(statut_confirmed_counts)
    else:
        st.info("Aucune famille n'est encore enregistr√©e dans le syst√®me.")